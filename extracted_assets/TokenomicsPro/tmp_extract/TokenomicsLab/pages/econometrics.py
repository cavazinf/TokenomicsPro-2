import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import statsmodels.api as sm
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
import datetime

# Import local modules
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from models.tokenomics import TokenomicsModel, create_model_from_dict

st.set_page_config(
    page_title="Econometrics | Tokenomics Lab",
    page_icon="üìà",
    layout="wide"
)

# Sidebar
st.sidebar.title("Tokenomics Lab")
st.sidebar.image("https://cdn.jsdelivr.net/npm/cryptocurrency-icons@0.18.1/svg/icon/btc.svg", width=50)

# Main content
st.title("Econometrics")
st.markdown("""
    An√°lise econom√©trica do modelo de token, incluindo proje√ß√µes avan√ßadas, correla√ß√µes com vari√°veis externas
    e modelagem de cen√°rios macroecon√¥micos.
""")

# Check if simulation data exists
if 'simulation_result' not in st.session_state:
    st.warning("Voc√™ precisa executar uma simula√ß√£o primeiro. V√° para a p√°gina de Simula√ß√£o.")
    if st.button("Ir para Simula√ß√£o"):
        st.switch_page("pages/simulation.py")
    st.stop()

# Get simulation data
df = st.session_state.simulation_result
model = st.session_state.model if 'model' in st.session_state else None

# Econometric Analysis Tabs
tabs = st.tabs(["Previs√£o de Pre√ßo", "Correla√ß√µes", "An√°lise de Elasticidade", "Cen√°rios"])

with tabs[0]:
    st.header("Previs√£o de Pre√ßo")
    st.markdown("""
        Utilize modelos econom√©tricos para projetar o pre√ßo do token al√©m do per√≠odo de simula√ß√£o inicial.
        Esta an√°lise utiliza m√©todos estat√≠sticos como ARIMA e regress√£o.
    """)
    
    # Set up forecasting parameters
    forecast_period = st.slider(
        "Per√≠odo de Previs√£o Adicional (Meses)",
        min_value=1,
        max_value=24,
        value=12,
        help="N√∫mero de meses adicionais para previs√£o al√©m do per√≠odo de simula√ß√£o original."
    )
    
    confidence_level = st.slider(
        "N√≠vel de Confian√ßa (%)",
        min_value=50,
        max_value=99,
        value=95,
        help="N√≠vel de confian√ßa para os intervalos de previs√£o."
    )
    
    forecast_model = st.selectbox(
        "Modelo de Previs√£o",
        ["ARIMA", "SARIMAX", "Regress√£o Linear"],
        help="Modelo estat√≠stico para realizar a previs√£o."
    )
    
    if st.button("Executar Previs√£o"):
        with st.spinner("Calculando previs√£o..."):
            # Prepare data
            y = df['Price']
            X = df[['Month']]
            
            # Fit model based on selection
            if forecast_model == "ARIMA":
                try:
                    # Use statsmodels ARIMA
                    model_fit = ARIMA(y, order=(2,1,2)).fit()
                    
                    # Make forecast
                    forecast_result = model_fit.get_forecast(forecast_period)
                    forecast_mean = forecast_result.predicted_mean
                    forecast_ci = forecast_result.conf_int(alpha=(100-confidence_level)/100)
                    
                    # Create forecast dataframe
                    last_month = df['Month'].max()
                    forecast_index = range(last_month+1, last_month+forecast_period+1)
                    forecast_df = pd.DataFrame({
                        'Month': forecast_index,
                        'Price': forecast_mean.values,
                        'Lower_CI': forecast_ci.iloc[:, 0].values,
                        'Upper_CI': forecast_ci.iloc[:, 1].values
                    })
                    
                    # Create combined dataframe for plotting
                    combined_df = pd.concat([
                        df[['Month', 'Price']],
                        forecast_df[['Month', 'Price', 'Lower_CI', 'Upper_CI']]
                    ], axis=0)
                    
                    # Plot results
                    fig = go.Figure()
                    
                    # Historical data
                    fig.add_trace(
                        go.Scatter(
                            x=df['Month'],
                            y=df['Price'],
                            mode='lines',
                            name='Dados Hist√≥ricos',
                            line=dict(color='blue')
                        )
                    )
                    
                    # Forecasted data
                    fig.add_trace(
                        go.Scatter(
                            x=forecast_df['Month'],
                            y=forecast_df['Price'],
                            mode='lines',
                            name='Previs√£o',
                            line=dict(color='red', dash='dash')
                        )
                    )
                    
                    # Confidence intervals
                    fig.add_trace(
                        go.Scatter(
                            x=forecast_df['Month'],
                            y=forecast_df['Upper_CI'],
                            mode='lines',
                            name=f'Intervalo de Confian√ßa {confidence_level}%',
                            line=dict(width=0),
                            showlegend=False
                        )
                    )
                    
                    fig.add_trace(
                        go.Scatter(
                            x=forecast_df['Month'],
                            y=forecast_df['Lower_CI'],
                            mode='lines',
                            name=f'Intervalo de Confian√ßa {confidence_level}%',
                            line=dict(width=0),
                            fillcolor='rgba(68, 68, 68, 0.3)',
                            fill='tonexty',
                            showlegend=True
                        )
                    )
                    
                    fig.update_layout(
                        title=f'Previs√£o de Pre√ßo com {forecast_model} - {forecast_period} Meses',
                        xaxis_title='M√™s',
                        yaxis_title='Pre√ßo ($)',
                        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
                        height=600
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Summary statistics
                    st.subheader("Estat√≠sticas da Previs√£o")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric(
                            "Pre√ßo Final Previsto",
                            f"${forecast_df['Price'].iloc[-1]:.4f}",
                            f"{(forecast_df['Price'].iloc[-1] / df['Price'].iloc[-1] - 1) * 100:.2f}%"
                        )
                    
                    with col2:
                        st.metric(
                            "Limite Inferior de Confian√ßa",
                            f"${forecast_df['Lower_CI'].iloc[-1]:.4f}"
                        )
                    
                    with col3:
                        st.metric(
                            "Limite Superior de Confian√ßa",
                            f"${forecast_df['Upper_CI'].iloc[-1]:.4f}"
                        )
                    
                    # Display forecast data
                    st.subheader("Dados da Previs√£o")
                    st.dataframe(forecast_df)
                    
                except Exception as e:
                    st.error(f"Erro ao executar o modelo ARIMA: {str(e)}")
                    st.info("Tente utilizar um modelo diferente ou ajustar os par√¢metros.")
            
            elif forecast_model == "SARIMAX":
                try:
                    # Simplified model for demonstration
                    model_fit = SARIMAX(y, order=(1, 1, 1), seasonal_order=(0, 0, 0, 0)).fit(disp=False)
                    
                    # Make forecast
                    forecast_result = model_fit.get_forecast(forecast_period)
                    forecast_mean = forecast_result.predicted_mean
                    forecast_ci = forecast_result.conf_int(alpha=(100-confidence_level)/100)
                    
                    # Create forecast dataframe
                    last_month = df['Month'].max()
                    forecast_index = range(last_month+1, last_month+forecast_period+1)
                    forecast_df = pd.DataFrame({
                        'Month': forecast_index,
                        'Price': forecast_mean.values,
                        'Lower_CI': forecast_ci.iloc[:, 0].values,
                        'Upper_CI': forecast_ci.iloc[:, 1].values
                    })
                    
                    # Create plot
                    fig = go.Figure()
                    
                    # Historical data
                    fig.add_trace(
                        go.Scatter(
                            x=df['Month'],
                            y=df['Price'],
                            mode='lines',
                            name='Dados Hist√≥ricos',
                            line=dict(color='blue')
                        )
                    )
                    
                    # Forecasted data
                    fig.add_trace(
                        go.Scatter(
                            x=forecast_df['Month'],
                            y=forecast_df['Price'],
                            mode='lines',
                            name='Previs√£o',
                            line=dict(color='red', dash='dash')
                        )
                    )
                    
                    # Confidence intervals
                    fig.add_trace(
                        go.Scatter(
                            x=forecast_df['Month'],
                            y=forecast_df['Upper_CI'],
                            mode='lines',
                            name=f'Intervalo de Confian√ßa {confidence_level}%',
                            line=dict(width=0),
                            showlegend=False
                        )
                    )
                    
                    fig.add_trace(
                        go.Scatter(
                            x=forecast_df['Month'],
                            y=forecast_df['Lower_CI'],
                            mode='lines',
                            name=f'Intervalo de Confian√ßa {confidence_level}%',
                            line=dict(width=0),
                            fillcolor='rgba(68, 68, 68, 0.3)',
                            fill='tonexty',
                            showlegend=True
                        )
                    )
                    
                    fig.update_layout(
                        title=f'Previs√£o de Pre√ßo com {forecast_model} - {forecast_period} Meses',
                        xaxis_title='M√™s',
                        yaxis_title='Pre√ßo ($)',
                        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
                        height=600
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Summary statistics
                    st.subheader("Estat√≠sticas da Previs√£o")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric(
                            "Pre√ßo Final Previsto",
                            f"${forecast_df['Price'].iloc[-1]:.4f}",
                            f"{(forecast_df['Price'].iloc[-1] / df['Price'].iloc[-1] - 1) * 100:.2f}%"
                        )
                    
                    with col2:
                        st.metric(
                            "Limite Inferior de Confian√ßa",
                            f"${forecast_df['Lower_CI'].iloc[-1]:.4f}"
                        )
                    
                    with col3:
                        st.metric(
                            "Limite Superior de Confian√ßa",
                            f"${forecast_df['Upper_CI'].iloc[-1]:.4f}"
                        )
                    
                    # Display forecast data
                    st.subheader("Dados da Previs√£o")
                    st.dataframe(forecast_df)
                    
                except Exception as e:
                    st.error(f"Erro ao executar o modelo SARIMAX: {str(e)}")
                    st.info("Tente utilizar um modelo diferente ou ajustar os par√¢metros.")
            
            elif forecast_model == "Regress√£o Linear":
                try:
                    # Add constant to predictor
                    X = sm.add_constant(X)
                    
                    # Fit regression model
                    model_fit = sm.OLS(y, X).fit()
                    
                    # Make predictions for future months
                    last_month = df['Month'].max()
                    future_months = pd.DataFrame({
                        'Month': range(last_month+1, last_month+forecast_period+1)
                    })
                    future_months_with_const = sm.add_constant(future_months)
                    
                    # Predict mean
                    forecast_mean = model_fit.predict(future_months_with_const)
                    
                    # Predict confidence intervals
                    forecast_ci = model_fit.get_prediction(future_months_with_const).conf_int(alpha=(100-confidence_level)/100)
                    
                    # Create forecast dataframe
                    forecast_df = pd.DataFrame({
                        'Month': future_months['Month'],
                        'Price': forecast_mean,
                        'Lower_CI': forecast_ci.iloc[:, 0],
                        'Upper_CI': forecast_ci.iloc[:, 1]
                    })
                    
                    # Create plot
                    fig = go.Figure()
                    
                    # Historical data
                    fig.add_trace(
                        go.Scatter(
                            x=df['Month'],
                            y=df['Price'],
                            mode='lines',
                            name='Dados Hist√≥ricos',
                            line=dict(color='blue')
                        )
                    )
                    
                    # Forecasted data
                    fig.add_trace(
                        go.Scatter(
                            x=forecast_df['Month'],
                            y=forecast_df['Price'],
                            mode='lines',
                            name='Previs√£o',
                            line=dict(color='red', dash='dash')
                        )
                    )
                    
                    # Confidence intervals
                    fig.add_trace(
                        go.Scatter(
                            x=forecast_df['Month'],
                            y=forecast_df['Upper_CI'],
                            mode='lines',
                            name=f'Intervalo de Confian√ßa {confidence_level}%',
                            line=dict(width=0),
                            showlegend=False
                        )
                    )
                    
                    fig.add_trace(
                        go.Scatter(
                            x=forecast_df['Month'],
                            y=forecast_df['Lower_CI'],
                            mode='lines',
                            name=f'Intervalo de Confian√ßa {confidence_level}%',
                            line=dict(width=0),
                            fillcolor='rgba(68, 68, 68, 0.3)',
                            fill='tonexty',
                            showlegend=True
                        )
                    )
                    
                    fig.update_layout(
                        title=f'Previs√£o de Pre√ßo com {forecast_model} - {forecast_period} Meses',
                        xaxis_title='M√™s',
                        yaxis_title='Pre√ßo ($)',
                        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
                        height=600
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Model summary
                    st.subheader("Resumo do Modelo")
                    st.text(model_fit.summary().as_text())
                    
                    # Summary statistics
                    st.subheader("Estat√≠sticas da Previs√£o")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric(
                            "Pre√ßo Final Previsto",
                            f"${forecast_df['Price'].iloc[-1]:.4f}",
                            f"{(forecast_df['Price'].iloc[-1] / df['Price'].iloc[-1] - 1) * 100:.2f}%"
                        )
                    
                    with col2:
                        st.metric(
                            "Limite Inferior de Confian√ßa",
                            f"${forecast_df['Lower_CI'].iloc[-1]:.4f}"
                        )
                    
                    with col3:
                        st.metric(
                            "Limite Superior de Confian√ßa",
                            f"${forecast_df['Upper_CI'].iloc[-1]:.4f}"
                        )
                    
                    # Display forecast data
                    st.subheader("Dados da Previs√£o")
                    st.dataframe(forecast_df)
                    
                except Exception as e:
                    st.error(f"Erro ao executar o modelo de Regress√£o Linear: {str(e)}")
                    st.info("Tente utilizar um modelo diferente ou ajustar os par√¢metros.")

with tabs[1]:
    st.header("An√°lise de Correla√ß√µes")
    st.markdown("""
        Analise as correla√ß√µes entre diferentes vari√°veis do modelo para entender como os fatores se influenciam.
        Identificar correla√ß√µes fortes pode ajudar a otimizar o design de tokenomics.
    """)
    
    # Select variables for correlation analysis
    available_columns = df.columns.tolist()
    
    # Exclude non-numeric columns for correlation
    exclude_cols = ['Month']
    numeric_columns = [col for col in available_columns if col not in exclude_cols]
    
    if len(numeric_columns) < 2:
        st.warning("S√£o necess√°rias pelo menos duas vari√°veis num√©ricas para an√°lise de correla√ß√£o.")
    else:
        # Let user select variables
        selected_vars = st.multiselect(
            "Selecione as vari√°veis para an√°lise de correla√ß√£o",
            options=numeric_columns,
            default=["Price", "Circulating_Supply", "Market_Cap"],
            help="Escolha pelo menos duas vari√°veis para analisar suas correla√ß√µes."
        )
        
        if len(selected_vars) < 2:
            st.warning("Selecione pelo menos duas vari√°veis para an√°lise.")
        else:
            # Calculate correlation matrix
            corr_matrix = df[selected_vars].corr()
            
            # Plot heatmap
            fig = px.imshow(
                corr_matrix, 
                text_auto=True, 
                color_continuous_scale='RdBu_r',
                title="Matriz de Correla√ß√£o",
                labels=dict(x="Vari√°vel", y="Vari√°vel", color="Correla√ß√£o")
            )
            
            fig.update_layout(
                height=600,
                width=700
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Strongest correlations
            st.subheader("Correla√ß√µes Mais Fortes")
            
            # Convert correlation matrix to long format
            corr_data = []
            for i in range(len(corr_matrix.columns)):
                for j in range(i):
                    corr_data.append({
                        'Variable 1': corr_matrix.columns[i],
                        'Variable 2': corr_matrix.columns[j],
                        'Correlation': corr_matrix.iloc[i, j]
                    })
            
            if corr_data:
                corr_df = pd.DataFrame(corr_data)
                corr_df['Abs_Correlation'] = corr_df['Correlation'].abs()
                corr_df = corr_df.sort_values('Abs_Correlation', ascending=False)
                
                st.dataframe(corr_df[['Variable 1', 'Variable 2', 'Correlation']])
                
                # Scatter plot for top correlation
                if not corr_df.empty:
                    top_corr = corr_df.iloc[0]
                    var1 = top_corr['Variable 1']
                    var2 = top_corr['Variable 2']
                    corr_val = top_corr['Correlation']
                    
                    st.subheader(f"Visualiza√ß√£o da Correla√ß√£o mais Forte: {var1} vs {var2} ({corr_val:.3f})")
                    
                    fig = px.scatter(
                        df, 
                        x=var1, 
                        y=var2, 
                        trendline="ols",
                        title=f"Correla√ß√£o entre {var1} e {var2}",
                        labels={var1: var1, var2: var2}
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Interpretation
                    st.subheader("Interpreta√ß√£o")
                    
                    corr_value = corr_val
                    if corr_value > 0.7:
                        st.info(f"Existe uma forte correla√ß√£o positiva ({corr_value:.3f}) entre {var1} e {var2}, " 
                                f"indicando que quando {var1} aumenta, {var2} tamb√©m tende a aumentar significativamente.")
                    elif corr_value > 0.3:
                        st.info(f"Existe uma correla√ß√£o positiva moderada ({corr_value:.3f}) entre {var1} e {var2}, " 
                                f"indicando alguma tend√™ncia de aumento conjunto.")
                    elif corr_value > -0.3:
                        st.info(f"A correla√ß√£o ({corr_value:.3f}) entre {var1} e {var2} √© fraca, " 
                                f"indicando pouca rela√ß√£o linear entre as vari√°veis.")
                    elif corr_value > -0.7:
                        st.info(f"Existe uma correla√ß√£o negativa moderada ({corr_value:.3f}) entre {var1} e {var2}, " 
                                f"indicando que quando uma vari√°vel aumenta, a outra tende a diminuir moderadamente.")
                    else:
                        st.info(f"Existe uma forte correla√ß√£o negativa ({corr_value:.3f}) entre {var1} e {var2}, " 
                                f"indicando que quando uma vari√°vel aumenta, a outra tende a diminuir significativamente.")

with tabs[2]:
    st.header("An√°lise de Elasticidade")
    st.markdown("""
        A elasticidade mede como uma vari√°vel responde a mudan√ßas em outra vari√°vel.
        Esta an√°lise √© crucial para entender a sensibilidade do pre√ßo do token em rela√ß√£o 
        a fatores como oferta circulante, demanda e outras vari√°veis do modelo.
    """)
    
    # Choose variables for elasticity analysis
    dependent_var = st.selectbox(
        "Vari√°vel Dependente (Y)",
        options=numeric_columns,
        index=numeric_columns.index("Price") if "Price" in numeric_columns else 0,
        help="Vari√°vel cujas mudan√ßas voc√™ quer analisar (geralmente o pre√ßo)."
    )
    
    independent_vars = [col for col in numeric_columns if col != dependent_var]
    
    if not independent_vars:
        st.warning("N√£o h√° vari√°veis independentes dispon√≠veis para an√°lise de elasticidade.")
    else:
        independent_var = st.selectbox(
            "Vari√°vel Independente (X)",
            options=independent_vars,
            index=independent_vars.index("Circulating_Supply") if "Circulating_Supply" in independent_vars else 0,
            help="Vari√°vel que influencia a vari√°vel dependente."
        )
        
        # Calculate elasticity
        if st.button("Calcular Elasticidade"):
            try:
                # Create log-transformed data for elasticity calculation
                log_data = pd.DataFrame({
                    'log_y': np.log(df[dependent_var]),
                    'log_x': np.log(df[independent_var])
                }).dropna()
                
                if len(log_data) < 3:
                    st.error("Dados insuficientes para calcular elasticidade. Verifique se h√° valores zero ou negativos nas vari√°veis selecionadas.")
                else:
                    # Add constant
                    log_data = sm.add_constant(log_data)
                    
                    # Fit regression model
                    model = sm.OLS(log_data['log_y'], log_data[['const', 'log_x']]).fit()
                    
                    # The coefficient of log_x is the elasticity
                    elasticity = model.params['log_x']
                    
                    # Display results
                    st.subheader("Resultados da An√°lise de Elasticidade")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.metric(
                            "Elasticidade",
                            f"{elasticity:.4f}"
                        )
                        
                        # Interpretation
                        if abs(elasticity) < 0.5:
                            elasticity_type = "Inel√°stica"
                            interpretation = f"Uma varia√ß√£o de 1% em {independent_var} resulta em apenas {abs(elasticity):.2f}% de varia√ß√£o em {dependent_var}."
                        elif abs(elasticity) < 1.0:
                            elasticity_type = "Menos El√°stica"
                            interpretation = f"Uma varia√ß√£o de 1% em {independent_var} resulta em {abs(elasticity):.2f}% de varia√ß√£o em {dependent_var}."
                        elif abs(elasticity) < 1.5:
                            elasticity_type = "Elasticidade Unit√°ria"
                            interpretation = f"Uma varia√ß√£o de 1% em {independent_var} resulta em aproximadamente a mesma varia√ß√£o ({abs(elasticity):.2f}%) em {dependent_var}."
                        else:
                            elasticity_type = "Altamente El√°stica"
                            interpretation = f"Uma varia√ß√£o de 1% em {independent_var} resulta em uma grande varia√ß√£o de {abs(elasticity):.2f}% em {dependent_var}."
                        
                        sign = "positiva" if elasticity > 0 else "negativa"
                        
                        st.markdown(f"**Classifica√ß√£o:** {elasticity_type}")
                        st.markdown(f"**Dire√ß√£o:** Correla√ß√£o {sign}")
                        st.markdown(f"**Interpreta√ß√£o:** {interpretation}")
                    
                    with col2:
                        # Create scatter plot with fitted line
                        fig = px.scatter(
                            df, 
                            x=independent_var, 
                            y=dependent_var, 
                            trendline="ols",
                            title=f"Rela√ß√£o entre {dependent_var} e {independent_var}",
                            labels={independent_var: independent_var, dependent_var: dependent_var}
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                    
                    # Display regression summary
                    st.subheader("Resumo do Modelo de Regress√£o")
                    st.text(model.summary().as_text())
                    
                    # Implications
                    st.subheader("Implica√ß√µes para o Tokenomics")
                    
                    if independent_var == "Circulating_Supply" and dependent_var == "Price":
                        if elasticity < -0.8:
                            st.info(f"A alta elasticidade negativa ({elasticity:.2f}) indica que o pre√ßo √© muito sens√≠vel a mudan√ßas na oferta circulante. Isto sugere que controlar cuidadosamente o cronograma de vesting e libera√ß√£o de tokens √© crucial para a estabilidade de pre√ßo.")
                        elif elasticity < -0.3:
                            st.info(f"A elasticidade moderada ({elasticity:.2f}) indica que aumentos na oferta circulante t√™m um impacto negativo no pre√ßo, mas n√£o t√£o severo. Um cronograma de vesting gradual √© recomendado.")
                        else:
                            st.info(f"A baixa elasticidade ({elasticity:.2f}) sugere que o pre√ßo n√£o √© muito sens√≠vel a mudan√ßas na oferta circulante, indicando que outros fatores podem ter maior influ√™ncia no pre√ßo do token.")
                    elif independent_var == "Market_Cap" and dependent_var == "Price":
                        if elasticity > 0.8:
                            st.info(f"A alta elasticidade positiva ({elasticity:.2f}) entre market cap e pre√ßo sugere uma forte correla√ß√£o. Estrat√©gias que aumentam o valor de mercado ter√£o um impacto significativo no pre√ßo do token.")
                        else:
                            st.info(f"A elasticidade moderada ({elasticity:.2f}) entre market cap e pre√ßo sugere que, embora relacionados, outros fatores tamb√©m influenciam significativamente o pre√ßo do token.")
                    elif "Staking" in independent_var and dependent_var == "Price":
                        if elasticity > 0.5:
                            st.info(f"A elasticidade positiva ({elasticity:.2f}) entre staking e pre√ßo sugere que incentivos de staking podem ser uma estrat√©gia efetiva para suportar o pre√ßo do token.")
                        else:
                            st.info(f"A elasticidade modesta ({elasticity:.2f}) entre staking e pre√ßo sugere que, embora o staking contribua para o suporte de pre√ßo, seu impacto √© limitado.")
                    else:
                        st.info(f"A elasticidade de {elasticity:.2f} entre {dependent_var} e {independent_var} fornece insights sobre como esses fatores se inter-relacionam em seu modelo de tokenomics. Considere este valor ao ajustar par√¢metros do modelo.")
            
            except Exception as e:
                st.error(f"Erro ao calcular elasticidade: {str(e)}")
                st.info("Verifique se as vari√°veis selecionadas cont√™m valores v√°lidos para an√°lise logar√≠tmica (n√£o podem ter zeros ou valores negativos).")

with tabs[3]:
    st.header("Simula√ß√£o de Cen√°rios Macroecon√¥micos")
    st.markdown("""
        Analise como diferentes cen√°rios macroecon√¥micos podem impactar seu token.
        Esta ferramenta permite simular o comportamento do token sob diferentes condi√ß√µes de mercado.
    """)
    
    # Scenario options
    scenario = st.selectbox(
        "Selecione um Cen√°rio Macroecon√¥mico",
        [
            "Mercado de Alta (Bull Market)",
            "Mercado de Baixa (Bear Market)",
            "Alta Infla√ß√£o",
            "Recess√£o Econ√¥mica",
            "Ado√ß√£o Acelerada de Criptomoedas",
            "Regula√ß√£o Restritiva",
            "Cen√°rio Personalizado"
        ]
    )
    
    # Set default parameters based on selected scenario
    if scenario == "Mercado de Alta (Bull Market)":
        market_growth = 0.2
        volatility_factor = 1.5
        adoption_factor = 1.3
        regulatory_impact = 0.0
    elif scenario == "Mercado de Baixa (Bear Market)":
        market_growth = -0.15
        volatility_factor = 2.0
        adoption_factor = 0.7
        regulatory_impact = 0.0
    elif scenario == "Alta Infla√ß√£o":
        market_growth = 0.05
        volatility_factor = 1.8
        adoption_factor = 0.9
        regulatory_impact = 0.0
    elif scenario == "Recess√£o Econ√¥mica":
        market_growth = -0.1
        volatility_factor = 1.7
        adoption_factor = 0.6
        regulatory_impact = 0.1
    elif scenario == "Ado√ß√£o Acelerada de Criptomoedas":
        market_growth = 0.25
        volatility_factor = 1.2
        adoption_factor = 2.0
        regulatory_impact = -0.05
    elif scenario == "Regula√ß√£o Restritiva":
        market_growth = -0.05
        volatility_factor = 1.6
        adoption_factor = 0.8
        regulatory_impact = 0.3
    else:  # Cen√°rio Personalizado
        market_growth = 0.0
        volatility_factor = 1.0
        adoption_factor = 1.0
        regulatory_impact = 0.0
    
    # Allow customization of parameters
    st.subheader("Par√¢metros do Cen√°rio")
    
    col1, col2 = st.columns(2)
    
    with col1:
        market_growth = st.slider(
            "Crescimento de Mercado",
            min_value=-0.5,
            max_value=0.5,
            value=market_growth,
            step=0.05,
            format="%+.0f%%",
            help="Crescimento ou decl√≠nio geral do mercado de criptomoedas."
        )
        
        volatility_factor = st.slider(
            "Fator de Volatilidade",
            min_value=0.5,
            max_value=3.0,
            value=volatility_factor,
            step=0.1,
            help="Multiplicador da volatilidade normal do token."
        )
    
    with col2:
        adoption_factor = st.slider(
            "Fator de Ado√ß√£o",
            min_value=0.1,
            max_value=3.0,
            value=adoption_factor,
            step=0.1,
            help="Taxa de crescimento de usu√°rios/uso em rela√ß√£o ao normal."
        )
        
        regulatory_impact = st.slider(
            "Impacto Regulat√≥rio",
            min_value=-0.3,
            max_value=0.5,
            value=regulatory_impact,
            step=0.05,
            help="Impacto de regula√ß√µes no valor do token (negativo=favor√°vel, positivo=desfavor√°vel)."
        )
    
    # Simulation length
    sim_months = st.slider(
        "Per√≠odo de Simula√ß√£o (Meses)",
        min_value=6,
        max_value=36,
        value=12,
        step=6
    )
    
    # Run simulation
    if st.button("Simular Cen√°rio", type="primary"):
        with st.spinner(f"Simulando cen√°rio '{scenario}'..."):
            try:
                # Start with base data
                last_price = df['Price'].iloc[-1]
                last_supply = df['Circulating_Supply'].iloc[-1]
                max_supply = st.session_state.model.total_supply
                
                # Generate dates for simulation
                last_month = df['Month'].max()
                sim_months_range = range(last_month + 1, last_month + sim_months + 1)
                
                # Create simulation data
                prices = [last_price]
                supplies = [last_supply]
                
                # Simple simulation model
                for i in range(sim_months):
                    # Calculate new supply (simplified)
                    new_supply = min(supplies[-1] * (1 + 0.02 * adoption_factor), max_supply)
                    supplies.append(new_supply)
                    
                    # Calculate price impact factors
                    supply_factor = supplies[-2] / supplies[-1] if supplies[-1] > 0 else 1
                    market_factor = 1 + market_growth / 12  # Monthly growth
                    reg_factor = 1 - regulatory_impact / 12  # Monthly impact
                    random_factor = 1 + np.random.normal(0, 0.08 * volatility_factor)
                    
                    # Calculate new price
                    new_price = prices[-1] * supply_factor * market_factor * reg_factor * random_factor
                    new_price = max(new_price, 0.00001)  # Prevent negative prices
                    prices.append(new_price)
                
                # Create dataframe
                scenario_df = pd.DataFrame({
                    'Month': sim_months_range,
                    'Price': prices[1:],
                    'Circulating_Supply': supplies[1:],
                    'Market_Cap': [p * s for p, s in zip(prices[1:], supplies[1:])]
                })
                
                # Combine with original data for plotting
                combined_df = pd.concat([
                    df[['Month', 'Price', 'Circulating_Supply', 'Market_Cap']],
                    scenario_df
                ], axis=0)
                
                # Plot results
                st.subheader(f"Resultados da Simula√ß√£o: {scenario}")
                
                # Price chart
                fig = go.Figure()
                
                # Add historical data
                fig.add_trace(
                    go.Scatter(
                        x=df['Month'],
                        y=df['Price'],
                        mode='lines',
                        name='Dados Hist√≥ricos',
                        line=dict(color='blue')
                    )
                )
                
                # Add scenario data
                fig.add_trace(
                    go.Scatter(
                        x=scenario_df['Month'],
                        y=scenario_df['Price'],
                        mode='lines',
                        name=f'Cen√°rio: {scenario}',
                        line=dict(color='red')
                    )
                )
                
                fig.update_layout(
                    title='Proje√ß√£o de Pre√ßo do Token',
                    xaxis_title='M√™s',
                    yaxis_title='Pre√ßo ($)',
                    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
                    height=500
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Key metrics
                st.subheader("M√©tricas-Chave do Cen√°rio")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    price_change = (scenario_df['Price'].iloc[-1] / df['Price'].iloc[-1] - 1) * 100
                    st.metric(
                        "Pre√ßo Final Projetado",
                        f"${scenario_df['Price'].iloc[-1]:.4f}",
                        f"{price_change:.2f}%"
                    )
                
                with col2:
                    supply_change = (scenario_df['Circulating_Supply'].iloc[-1] / df['Circulating_Supply'].iloc[-1] - 1) * 100
                    st.metric(
                        "Oferta Circulante Final",
                        f"{scenario_df['Circulating_Supply'].iloc[-1]:,.0f}",
                        f"{supply_change:.2f}%"
                    )
                
                with col3:
                    mcap_change = (scenario_df['Market_Cap'].iloc[-1] / df['Market_Cap'].iloc[-1] - 1) * 100
                    st.metric(
                        "Market Cap Final",
                        f"${scenario_df['Market_Cap'].iloc[-1]:,.2f}",
                        f"{mcap_change:.2f}%"
                    )
                
                # Scenario analysis
                st.subheader("An√°lise do Cen√°rio")
                
                if price_change > 50:
                    price_assessment = "extremamente positivo"
                elif price_change > 20:
                    price_assessment = "muito positivo"
                elif price_change > 0:
                    price_assessment = "positivo"
                elif price_change > -20:
                    price_assessment = "ligeiramente negativo"
                else:
                    price_assessment = "fortemente negativo"
                
                st.markdown(f"""
                    **Impacto no Pre√ßo:** O cen√°rio '{scenario}' tem um impacto {price_assessment} no pre√ßo do token, 
                    resultando em uma mudan√ßa de {price_change:.2f}% ao longo de {sim_months} meses.
                    
                    **Recomenda√ß√µes:**
                """)
                
                if price_change < 0:
                    st.markdown("""
                        - Considere ajustar o cronograma de vesting para reduzir a press√£o de venda durante este per√≠odo
                        - Implemente programas de staking ou recompensas para incentivar a reten√ß√£o de tokens
                        - Enfatize os casos de uso de longo prazo do token para mitigar vendas baseadas em medo
                    """)
                else:
                    st.markdown("""
                        - Este cen√°rio favorece o crescimento do valor do token
                        - Considere acelerar o desenvolvimento e ado√ß√£o do projeto durante este per√≠odo favor√°vel
                        - Mantenha reservas para o caso de revers√£o do cen√°rio positivo
                    """)
                
                # Display full simulation data
                st.subheader("Dados Completos da Simula√ß√£o")
                st.dataframe(scenario_df)
                
            except Exception as e:
                st.error(f"Erro na simula√ß√£o: {str(e)}")
                st.info("Verifique os par√¢metros do modelo e tente novamente.")

# Add this simulation to the model's data for reporting
if st.sidebar.button("Salvar An√°lise Econom√©trica para Relat√≥rio"):
    if 'econometric_analysis' not in st.session_state:
        st.session_state.econometric_analysis = {}
    
    # Store current timestamp
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Save a basic record of the analysis performed
    st.session_state.econometric_analysis[timestamp] = {
        "type": "Econometric Analysis",
        "description": "An√°lise econom√©trica incluindo proje√ß√µes de pre√ßo, correla√ß√µes e simula√ß√µes de cen√°rios.",
        "model_name": st.session_state.model.name if 'model' in st.session_state else "N/A"
    }
    
    st.sidebar.success("An√°lise econom√©trica salva para inclus√£o no relat√≥rio final!")