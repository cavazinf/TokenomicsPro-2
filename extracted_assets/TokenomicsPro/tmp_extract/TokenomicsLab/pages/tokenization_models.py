import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# Import local modules
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from models.tokenomics import TokenomicsModel, UtilityTokenModel, GovernanceTokenModel

st.set_page_config(
    page_title="Tokenization Models | Tokenomics Lab",
    page_icon="üèóÔ∏è",
    layout="wide"
)

# Sidebar
st.sidebar.title("Tokenomics Lab")
st.sidebar.image("https://cdn.jsdelivr.net/npm/cryptocurrency-icons@0.18.1/svg/icon/btc.svg", width=50)

# Main content
st.title("Modelos de Tokeniza√ß√£o")
st.markdown("""
    Explore diferentes modelos de tokeniza√ß√£o para seu projeto ou startup. 
    Cada modelo oferece caracter√≠sticas √∫nicas e adequa-se a diferentes tipos de neg√≥cios e objetivos.
""")

# Models explanation section
st.header("Entendendo os Modelos de Tokeniza√ß√£o")

# Create tabs for different tokenization models
models_tabs = st.tabs([
    "Utility Token", 
    "Security Token", 
    "Governance Token", 
    "Stablecoin", 
    "NFT", 
    "Composto/H√≠brido"
])

with models_tabs[0]:
    st.subheader("Utility Token")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        **Descri√ß√£o:**
        Tokens de utilidade fornecem acesso a um produto, servi√ßo ou recurso dentro de um ecossistema espec√≠fico.

        **Principais Caracter√≠sticas:**
        - Representam o direito de usar um produto ou servi√ßo
        - Valor derivado da utilidade e demanda pelo servi√ßo
        - N√£o s√£o considerados investimentos (idealmente)
        - Podem incluir mecanismos de staking ou queima

        **Exemplos de Uso:**
        - Acesso a funcionalidades em plataformas
        - Pagamento de taxas de transa√ß√£o
        - Descontos em servi√ßos
        - Sistema de recompensas
        """)
        
        st.markdown("**Exemplos de Projetos:**")
        st.markdown("- **Filecoin (FIL)**: Acesso e pagamento por armazenamento descentralizado")
        st.markdown("- **Basic Attention Token (BAT)**: Recompensas para aten√ß√£o do usu√°rio no ecossistema Brave")
        st.markdown("- **Chainlink (LINK)**: Pagamento para or√°culos fornecerem dados √† rede")
    
    with col2:
        # Simple diagram
        flow_data = pd.DataFrame([
            {"Etapa": "Usu√°rio Adquire Tokens", "Posi√ß√£o": 1, "Valor": 10},
            {"Etapa": "Usu√°rio Utiliza o Servi√ßo", "Posi√ß√£o": 2, "Valor": 10},
            {"Etapa": "Tokens s√£o Utilizados", "Posi√ß√£o": 3, "Valor": 10},
            {"Etapa": "Servi√ßo Entregue", "Posi√ß√£o": 4, "Valor": 10},
        ])
        
        fig = px.bar(
            flow_data, 
            x="Posi√ß√£o", 
            y="Valor", 
            color="Etapa", 
            title="Fluxo de Utility Token",
            labels={"Valor": "", "Posi√ß√£o": ""},
            height=300
        )
        
        fig.update_layout(
            showlegend=True,
            xaxis={'visible': False},
            yaxis={'visible': False}
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Market fit assessment
        st.markdown("### Adequa√ß√£o ao Mercado")
        
        st.markdown("""
        **Ideal para:**
        - Plataformas de tecnologia
        - Marketplaces
        - Sistemas de compartilhamento
        - Redes de servi√ßos
        """)

with models_tabs[1]:
    st.subheader("Security Token")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        **Descri√ß√£o:**
        Security tokens representam ativos de investimento tradicionais como a√ß√µes, t√≠tulos, ou participa√ß√£o em fundos 
        e propriedades, mas tokenizados em uma blockchain.

        **Principais Caracter√≠sticas:**
        - Representam participa√ß√£o em ativos subjacentes com valor
        - Geralmente sujeitos a regula√ß√µes de valores mobili√°rios
        - Podem pagar dividendos ou dar direitos de propriedade
        - Oferecem maior liquidez a ativos tradicionalmente il√≠quidos

        **Exemplos de Uso:**
        - Tokeniza√ß√£o de a√ß√µes e participa√ß√µes em empresas
        - Representa√ß√£o de d√≠vida (bonds)
        - Tokeniza√ß√£o de im√≥veis (fra√ß√µes de propriedades)
        - Fundos de investimento tokenizados
        """)
        
        st.markdown("**Exemplos de Projetos:**")
        st.markdown("- **Polymath (POLY)**: Plataforma para cria√ß√£o e gerenciamento de security tokens")
        st.markdown("- **tZERO**: Plataforma de negocia√ß√£o de security tokens")
        st.markdown("- **RealT**: Tokeniza√ß√£o de im√≥veis fracionados")
    
    with col2:
        # Simple diagram
        pie_data = pd.DataFrame([
            {"Categoria": "Retorno aos Investidores", "Valor": 40},
            {"Categoria": "Reserva Legal", "Valor": 25},
            {"Categoria": "Desenvolvimento", "Valor": 20},
            {"Categoria": "Marketing", "Valor": 15}
        ])
        
        fig = px.pie(
            pie_data, 
            values='Valor', 
            names='Categoria', 
            title="Distribui√ß√£o T√≠pica de Retornos",
            height=300
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Market fit assessment
        st.markdown("### Adequa√ß√£o ao Mercado")
        
        st.markdown("""
        **Ideal para:**
        - Empresas buscando captar investimento
        - Fundos de investimento
        - Mercado imobili√°rio
        - Empresas de private equity
        - Mercados financeiros tradicionais
        """)

with models_tabs[2]:
    st.subheader("Governance Token")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        **Descri√ß√£o:**
        Tokens de governan√ßa permitem que seus detentores votem em decis√µes importantes que afetam o futuro de um protocolo ou plataforma, 
        criando um sistema de governan√ßa descentralizada.

        **Principais Caracter√≠sticas:**
        - Representam direitos de voto e poder de decis√£o
        - Geralmente usados em DAOs (Organiza√ß√µes Aut√¥nomas Descentralizadas)
        - Podem incluir direitos adicionais (staking, participa√ß√£o em receitas)
        - Incentivam participa√ß√£o comunit√°ria de longo prazo

        **Exemplos de Uso:**
        - Vota√ß√£o em propostas de melhoria
        - Decis√µes sobre aloca√ß√£o de recursos
        - Mudan√ßas de par√¢metros do protocolo
        - Sele√ß√£o de provedores de servi√ßos
        """)
        
        st.markdown("**Exemplos de Projetos:**")
        st.markdown("- **Compound (COMP)**: Governan√ßa do protocolo de empr√©stimo Compound")
        st.markdown("- **Uniswap (UNI)**: Governan√ßa da exchange descentralizada Uniswap")
        st.markdown("- **MakerDAO (MKR)**: Governan√ßa do protocolo que gerencia a stablecoin DAI")
    
    with col2:
        # Simple diagram
        gov_data = pd.DataFrame([
            {"Fase": "Proposta", "Valor": 25},
            {"Fase": "Discuss√£o", "Valor": 25},
            {"Fase": "Vota√ß√£o", "Valor": 25},
            {"Fase": "Implementa√ß√£o", "Valor": 25}
        ])
        
        fig = px.pie(
            gov_data, 
            values='Valor', 
            names='Fase', 
            title="Ciclo de Governan√ßa",
            hole=0.4,
            height=300
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Market fit assessment
        st.markdown("### Adequa√ß√£o ao Mercado")
        
        st.markdown("""
        **Ideal para:**
        - Protocolos DeFi
        - DAOs
        - Projetos orientados √† comunidade
        - Plataformas descentralizadas de conte√∫do
        - Redes sociais descentralizadas
        """)

with models_tabs[3]:
    st.subheader("Stablecoin")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        **Descri√ß√£o:**
        Stablecoins s√£o tokens criados para manter um valor est√°vel, geralmente atrelado a um ativo ou cesta de ativos 
        como o d√≥lar americano, ouro ou outras moedas fiat.

        **Principais Caracter√≠sticas:**
        - Valor est√°vel, geralmente ancorado 1:1 com um ativo de refer√™ncia
        - Diferentes mecanismos de estabiliza√ß√£o (colateraliza√ß√£o, algoritmos)
        - Reduzem a volatilidade t√≠pica das criptomoedas
        - Servem como ponte entre finan√ßas tradicionais e cripto

        **Tipos Principais:**
        - **Colateralizadas por Fiat**: Lastreadas por moedas fiduci√°rias em cust√≥dia (USDC, USDT)
        - **Colateralizadas por Cripto**: Garantidas por criptoativos (DAI)
        - **Algor√≠tmicas**: Usam algoritmos para controlar oferta e manter o peg (FRAX)
        - **Colateralizadas por Commodities**: Lastreadas por ativos como ouro (PAXG)
        """)
        
        st.markdown("**Exemplos de Projetos:**")
        st.markdown("- **USDC (USD Coin)**: Stablecoin colateralizada por d√≥lares americanos")
        st.markdown("- **DAI**: Stablecoin colateralizada por cripto com valor atrelado ao d√≥lar")
        st.markdown("- **FRAX**: Stablecoin parcialmente algor√≠tmica")
    
    with col2:
        # Simple diagram
        stable_data = pd.DataFrame({
            'Data': range(1, 31),
            'Stablecoin': [1.0] * 30,
            'Crypto': [1.0 + 0.1 * np.sin(i / 2) + 0.05 * np.random.randn() for i in range(30)]
        })
        
        fig = px.line(
            stable_data, 
            x='Data', 
            y=['Stablecoin', 'Crypto'],
            title="Estabilidade de Pre√ßo",
            labels={"value": "Valor Relativo", "variable": "Tipo de Token"},
            height=300
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Market fit assessment
        st.markdown("### Adequa√ß√£o ao Mercado")
        
        st.markdown("""
        **Ideal para:**
        - Servi√ßos de pagamento
        - Remessas internacionais
        - Preserva√ß√£o de valor em mercados vol√°teis
        - Aplica√ß√µes DeFi
        - Com√©rcio eletr√¥nico
        """)

with models_tabs[4]:
    st.subheader("Non-Fungible Token (NFT)")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        **Descri√ß√£o:**
        NFTs s√£o tokens √∫nicos que representam a propriedade de um item digital ou f√≠sico espec√≠fico, 
        criando escassez digital e provando autenticidade e propriedade.

        **Principais Caracter√≠sticas:**
        - Representam itens √∫nicos ou de edi√ß√£o limitada
        - N√£o s√£o intercambi√°veis como tokens fung√≠veis
        - Provam autenticidade, propriedade e proced√™ncia
        - Podem incluir royalties para criadores em vendas secund√°rias

        **Exemplos de Uso:**
        - Arte digital
        - Colecion√°veis
        - Propriedade virtual (terrenos, itens em jogos)
        - Ingressos para eventos
        - Certificados e credenciais
        - Direitos de propriedade intelectual
        """)
        
        st.markdown("**Exemplos de Projetos:**")
        st.markdown("- **CryptoPunks**: Cole√ß√£o pioneira de avatares pixelados")
        st.markdown("- **NBA Top Shot**: Momentos memor√°veis de jogos da NBA como colecion√°veis")
        st.markdown("- **Decentraland**: Propriedades virtuais tokenizadas")
    
    with col2:
        # Simple diagram
        nft_data = pd.DataFrame([
            {"Categoria": "Arte Digital", "Valor": 40},
            {"Categoria": "Colecion√°veis", "Valor": 25},
            {"Categoria": "Gaming", "Valor": 20},
            {"Categoria": "Metaverso", "Valor": 15}
        ])
        
        fig = px.bar(
            nft_data, 
            x="Categoria", 
            y="Valor", 
            title="Distribui√ß√£o de Mercado NFT",
            height=300
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Market fit assessment
        st.markdown("### Adequa√ß√£o ao Mercado")
        
        st.markdown("""
        **Ideal para:**
        - Artistas e criadores de conte√∫do
        - Ind√∫stria de entretenimento
        - Jogos e metaverso
        - Gest√£o de propriedade intelectual
        - Autentica√ß√£o de produtos f√≠sicos
        """)

with models_tabs[5]:
    st.subheader("Tokens Compostos/H√≠bridos")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        **Descri√ß√£o:**
        Tokens h√≠bridos combinam caracter√≠sticas de m√∫ltiplos tipos de tokens, criando modelos mais flex√≠veis 
        e adaptados √†s necessidades espec√≠ficas de um projeto.

        **Principais Caracter√≠sticas:**
        - Combinam elementos de diferentes modelos de token
        - Oferecem m√∫ltiplas funcionalidades e casos de uso
        - Geralmente mais complexos em design e implementa√ß√£o
        - Podem se adaptar a diferentes fases do projeto

        **Exemplos de Combina√ß√µes:**
        - **Utility + Governance**: Acesso a servi√ßos + direitos de voto
        - **Security + Utility**: Participa√ß√£o nos lucros + uso na plataforma
        - **Governance + Staking**: Direitos de voto + recompensas por staking
        """)
        
        st.markdown("**Exemplos de Projetos:**")
        st.markdown("- **BNB (Binance Coin)**: Utilidade no ecossistema Binance + governan√ßa na BNB Chain")
        st.markdown("- **LINK (Chainlink)**: Utilidade para pagamentos + participa√ß√£o no sistema como validador")
        st.markdown("- **CAKE (PancakeSwap)**: Utilidade no ecossistema + yield farming + governan√ßa")
    
    with col2:
        # Simple diagram
        hybrid_data = pd.DataFrame([
            {"Caracter√≠stica": "Utilidade", "Valor": 35},
            {"Caracter√≠stica": "Governan√ßa", "Valor": 25},
            {"Caracter√≠stica": "Staking", "Valor": 20},
            {"Caracter√≠stica": "Investimento", "Valor": 20}
        ])
        
        fig = px.pie(
            hybrid_data, 
            values='Valor', 
            names='Caracter√≠stica', 
            title="Composi√ß√£o T√≠pica de Token H√≠brido",
            height=300
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Market fit assessment
        st.markdown("### Adequa√ß√£o ao Mercado")
        
        st.markdown("""
        **Ideal para:**
        - Ecossistemas complexos
        - Plataformas multi-facetadas
        - Projetos em crescimento
        - Aplica√ß√µes inovadoras de blockchain
        """)

# Model Selection Tool
st.header("Seletor de Modelo de Tokeniza√ß√£o")
st.markdown("""
    Use esta ferramenta para identificar o modelo de token mais adequado para seu projeto
    com base nas caracter√≠sticas do seu neg√≥cio e objetivos.
""")

# Questions for model selection
st.subheader("Responda √†s perguntas abaixo:")

col1, col2 = st.columns(2)

with col1:
    primary_purpose = st.selectbox(
        "1. Qual √© o prop√≥sito principal do seu token?",
        [
            "Acesso a produtos/servi√ßos na plataforma",
            "Representar participa√ß√£o/propriedade no projeto",
            "Permitir que usu√°rios participem da governan√ßa",
            "Criar um meio de pagamento est√°vel",
            "Representar ativos √∫nicos/colecion√°veis",
            "M√∫ltiplos prop√≥sitos"
        ]
    )
    
    business_type = st.selectbox(
        "2. Qual √© o tipo de neg√≥cio/plataforma?",
        [
            "Aplica√ß√£o/Plataforma de software",
            "Marketplace ou exchange",
            "Organiza√ß√£o descentralizada (DAO)",
            "Projeto de conte√∫do/m√≠dia",
            "Produto financeiro",
            "Jogo ou metaverso",
            "Infraestrutura blockchain"
        ]
    )
    
    revenue_model = st.selectbox(
        "3. Como o projeto pretende gerar valor?",
        [
            "Taxas de servi√ßo/assinatura",
            "Valoriza√ß√£o do token pelo uso crescente",
            "Comiss√µes em transa√ß√µes",
            "Venda de ativos digitais/NFTs",
            "Modelo de advertising",
            "Participa√ß√£o nos lucros",
            "Combina√ß√£o de fontes de receita"
        ]
    )

with col2:
    user_incentives = st.selectbox(
        "4. Como voc√™ planeja incentivar os usu√°rios?",
        [
            "Descontos e benef√≠cios no uso da plataforma",
            "Recompensas pelo uso/participa√ß√£o",
            "Direitos de voto em decis√µes",
            "Participa√ß√£o nas receitas/lucros",
            "Propriedade de ativos exclusivos",
            "Combina√ß√£o de incentivos"
        ]
    )
    
    regulatory_concerns = st.selectbox(
        "5. Qual √© sua posi√ß√£o em rela√ß√£o a regula√ß√µes?",
        [
            "Evitar qualquer caracter√≠stica de security/investimento",
            "Compliance total com regula√ß√µes de securities",
            "Foco em utilidade e governan√ßa",
            "Preocupa√ß√£o moderada com aspectos regulat√≥rios",
            "Opera√ß√£o em √°rea com regula√ß√£o ainda indefinida"
        ]
    )
    
    timescale = st.selectbox(
        "6. Qual √© o horizonte temporal para o seu projeto?",
        [
            "Curto prazo (1-2 anos)",
            "M√©dio prazo (3-5 anos)",
            "Longo prazo (5+ anos)",
            "Perp√©tuo (sem prazo definido)"
        ]
    )

# Calculate model recommendation
if st.button("Analisar e Recomendar Modelo", key="recommend", type="primary"):
    # Simple scoring system for demonstration
    scores = {
        "Utility Token": 0,
        "Security Token": 0,
        "Governance Token": 0,
        "Stablecoin": 0,
        "NFT": 0,
        "H√≠brido": 0
    }
    
    # Score based on primary purpose
    if primary_purpose == "Acesso a produtos/servi√ßos na plataforma":
        scores["Utility Token"] += 5
        scores["H√≠brido"] += 2
    elif primary_purpose == "Representar participa√ß√£o/propriedade no projeto":
        scores["Security Token"] += 5
        scores["H√≠brido"] += 2
    elif primary_purpose == "Permitir que usu√°rios participem da governan√ßa":
        scores["Governance Token"] += 5
        scores["H√≠brido"] += 2
    elif primary_purpose == "Criar um meio de pagamento est√°vel":
        scores["Stablecoin"] += 5
    elif primary_purpose == "Representar ativos √∫nicos/colecion√°veis":
        scores["NFT"] += 5
    elif primary_purpose == "M√∫ltiplos prop√≥sitos":
        scores["H√≠brido"] += 5
        scores["Utility Token"] += 2
        scores["Governance Token"] += 2
    
    # Score based on business type
    if business_type == "Aplica√ß√£o/Plataforma de software":
        scores["Utility Token"] += 3
        scores["H√≠brido"] += 2
    elif business_type == "Marketplace ou exchange":
        scores["Utility Token"] += 3
        scores["H√≠brido"] += 2
    elif business_type == "Organiza√ß√£o descentralizada (DAO)":
        scores["Governance Token"] += 4
        scores["H√≠brido"] += 3
    elif business_type == "Projeto de conte√∫do/m√≠dia":
        scores["Utility Token"] += 2
        scores["NFT"] += 3
    elif business_type == "Produto financeiro":
        scores["Security Token"] += 3
        scores["Stablecoin"] += 3
    elif business_type == "Jogo ou metaverso":
        scores["Utility Token"] += 2
        scores["NFT"] += 4
    elif business_type == "Infraestrutura blockchain":
        scores["Utility Token"] += 3
        scores["Governance Token"] += 3
        scores["H√≠brido"] += 3
    
    # Score based on revenue model
    if revenue_model == "Taxas de servi√ßo/assinatura":
        scores["Utility Token"] += 3
    elif revenue_model == "Valoriza√ß√£o do token pelo uso crescente":
        scores["Utility Token"] += 3
        scores["H√≠brido"] += 2
    elif revenue_model == "Comiss√µes em transa√ß√µes":
        scores["Utility Token"] += 2
        scores["Stablecoin"] += 2
    elif revenue_model == "Venda de ativos digitais/NFTs":
        scores["NFT"] += 4
    elif revenue_model == "Modelo de advertising":
        scores["Utility Token"] += 2
    elif revenue_model == "Participa√ß√£o nos lucros":
        scores["Security Token"] += 4
    elif revenue_model == "Combina√ß√£o de fontes de receita":
        scores["H√≠brido"] += 3
    
    # Score based on user incentives
    if user_incentives == "Descontos e benef√≠cios no uso da plataforma":
        scores["Utility Token"] += 3
    elif user_incentives == "Recompensas pelo uso/participa√ß√£o":
        scores["Utility Token"] += 3
        scores["H√≠brido"] += 2
    elif user_incentives == "Direitos de voto em decis√µes":
        scores["Governance Token"] += 4
    elif user_incentives == "Participa√ß√£o nas receitas/lucros":
        scores["Security Token"] += 4
    elif user_incentives == "Propriedade de ativos exclusivos":
        scores["NFT"] += 4
    elif user_incentives == "Combina√ß√£o de incentivos":
        scores["H√≠brido"] += 4
    
    # Score based on regulatory concerns
    if regulatory_concerns == "Evitar qualquer caracter√≠stica de security/investimento":
        scores["Security Token"] -= 3
        scores["Utility Token"] += 2
        scores["Governance Token"] += 1
    elif regulatory_concerns == "Compliance total com regula√ß√µes de securities":
        scores["Security Token"] += 3
    elif regulatory_concerns == "Foco em utilidade e governan√ßa":
        scores["Utility Token"] += 2
        scores["Governance Token"] += 2
    elif regulatory_concerns == "Preocupa√ß√£o moderada com aspectos regulat√≥rios":
        scores["H√≠brido"] += 1
    elif regulatory_concerns == "Opera√ß√£o em √°rea com regula√ß√£o ainda indefinida":
        scores["H√≠brido"] += 1
    
    # Score based on timescale
    if timescale == "Curto prazo (1-2 anos)":
        scores["Utility Token"] += 1
        scores["NFT"] += 2
    elif timescale == "M√©dio prazo (3-5 anos)":
        scores["H√≠brido"] += 2
    elif timescale == "Longo prazo (5+ anos)":
        scores["Governance Token"] += 2
        scores["H√≠brido"] += 2
    elif timescale == "Perp√©tuo (sem prazo definido)":
        scores["Governance Token"] += 3
        scores["H√≠brido"] += 2
    
    # Find top recommendations
    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    top_recommendations = sorted_scores[:3]
    
    # Display recommendations
    st.subheader("Recomenda√ß√µes de Modelos de Token")
    
    # Create chart of scores
    chart_data = pd.DataFrame({
        'Modelo': list(scores.keys()),
        'Pontua√ß√£o': list(scores.values())
    })
    
    fig = px.bar(
        chart_data,
        x='Modelo',
        y='Pontua√ß√£o',
        title="Avalia√ß√£o de Adequa√ß√£o dos Modelos",
        color='Pontua√ß√£o',
        color_continuous_scale=px.colors.sequential.Blues
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Display detailed recommendations
    for i, (model, score) in enumerate(top_recommendations):
        st.markdown(f"### {i+1}. {model} ({score} pontos)")
        
        if model == "Utility Token":
            st.markdown("""
            **Por que este modelo √© adequado para voc√™:**
            - Seu foco em fornecer acesso a produtos/servi√ßos se alinha com o modelo de utility token
            - A estrutura de receita baseada em uso da plataforma √© bem servida por um token de utilidade
            - Este modelo minimiza preocupa√ß√µes regulat√≥rias em compara√ß√£o com security tokens
            
            **Considera√ß√µes para implementa√ß√£o:**
            - Defina claramente a utilidade do token dentro do seu ecossistema
            - Desenvolva mecanismos para capturar valor no token √† medida que a plataforma cresce
            - Considere mecanismos de queima ou staking para gerenciar a oferta do token
            """)
            
        elif model == "Security Token":
            st.markdown("""
            **Por que este modelo √© adequado para voc√™:**
            - Seu objetivo de representar participa√ß√£o econ√¥mica se alinha com o modelo de security token
            - Sua disposi√ß√£o para compliance regulat√≥rio √© compat√≠vel com este modelo
            - O foco em participa√ß√£o nos lucros √© uma caracter√≠stica central dos security tokens
            
            **Considera√ß√µes para implementa√ß√£o:**
            - Busque consultoria jur√≠dica especializada para compliance regulat√≥rio
            - Defina claramente os direitos econ√¥micos associados ao token
            - Considere trabalhar com plataformas especializadas em emiss√£o de security tokens
            - Desenvolva um plano para listagem em exchanges regulamentadas
            """)
            
        elif model == "Governance Token":
            st.markdown("""
            **Por que este modelo √© adequado para voc√™:**
            - Seu interesse em envolver a comunidade na tomada de decis√µes se alinha com este modelo
            - A estrutura organizacional descentralizada √© compat√≠vel com tokens de governan√ßa
            - A vis√£o de longo prazo do projeto √© bem servida por um modelo de governan√ßa descentralizada
            
            **Considera√ß√µes para implementa√ß√£o:**
            - Defina claramente o escopo e mecanismos de governan√ßa (vota√ß√£o, propostas, qu√≥runs)
            - Crie um sistema que equilibre a participa√ß√£o ampla com a tomada de decis√µes eficiente
            - Considere implementar delega√ß√£o de votos para aumentar a participa√ß√£o efetiva
            - Introduza governan√ßa gradualmente, come√ßando com decis√µes menos cr√≠ticas
            """)
            
        elif model == "Stablecoin":
            st.markdown("""
            **Por que este modelo √© adequado para voc√™:**
            - Seu foco em criar um meio de pagamento est√°vel se alinha perfeitamente com este modelo
            - A necessidade de reduzir volatilidade para transa√ß√µes no seu ecossistema
            - Os casos de uso financeiros do seu projeto se beneficiam de valores est√°veis
            
            **Considera√ß√µes para implementa√ß√£o:**
            - Determine o mecanismo de estabiliza√ß√£o mais apropriado (colateralizado, algor√≠tmico ou h√≠brido)
            - Desenvolva sistemas robustos de auditoria e transpar√™ncia
            - Considere os requisitos regulat√≥rios espec√≠ficos para stablecoins
            - Estabele√ßa parcerias com institui√ß√µes financeiras se necess√°rio
            """)
            
        elif model == "NFT":
            st.markdown("""
            **Por que este modelo √© adequado para voc√™:**
            - Seu foco em ativos √∫nicos e colecion√°veis se alinha com o modelo NFT
            - O tipo de neg√≥cio baseado em conte√∫do, jogos ou metaverso √© ideal para NFTs
            - A capacidade de monetizar ativos digitais √∫nicos
            
            **Considera√ß√µes para implementa√ß√£o:**
            - Defina o valor √∫nico que seus NFTs oferecer√£o (est√©tica, utilidade, raridade)
            - Desenvolva uma estrat√©gia clara para lan√ßamentos iniciais e mercado secund√°rio
            - Considere implementar royalties para receita cont√≠nua em vendas secund√°rias
            - Crie experi√™ncias envolventes em torno dos seus NFTs para aumentar o valor
            """)
            
        elif model == "H√≠brido":
            st.markdown("""
            **Por que este modelo √© adequado para voc√™:**
            - Seus m√∫ltiplos objetivos e casos de uso se beneficiam de um modelo flex√≠vel
            - A combina√ß√£o de diferentes modelos de incentivo no seu projeto
            - A necessidade de adaptar o token para diferentes fases do projeto
            
            **Considera√ß√µes para implementa√ß√£o:**
            - Identifique claramente quais caracter√≠sticas de cada modelo voc√™ quer incorporar
            - Defina a pondera√ß√£o e import√¢ncia relativa de cada componente
            - Desenvolva uma documenta√ß√£o detalhada para explicar o design do token h√≠brido
            - Considere como as diferentes funcionalidades do token interagem entre si
            - Avalie as implica√ß√µes regulat√≥rias das diversas caracter√≠sticas incorporadas
            """)
    
    # Store recommendation in session state
    if 'token_model_recommendation' not in st.session_state:
        st.session_state.token_model_recommendation = {}
    
    st.session_state.token_model_recommendation = {
        'top_model': top_recommendations[0][0],
        'all_recommendations': top_recommendations,
        'scores': scores
    }
    
    # Offer to proceed to simulation
    st.markdown("---")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        if st.button("Salvar Recomenda√ß√£o", key="save_recommendation"):
            st.success(f"Recomenda√ß√£o do modelo {top_recommendations[0][0]} salva com sucesso!")
    
    with col2:
        if st.button("Prosseguir para Simula√ß√£o", key="goto_simulation"):
            st.switch_page("pages/simulation.py")